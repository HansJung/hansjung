package DrM_Peak;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import jxl.read.biff.BiffException;

public class Main {
	public static void main(String[] args){
		ReadExcel readexcel = new ReadExcel();
		List<Double> values = new ArrayList<Double>();
		List<Double> values1 = new ArrayList<Double>();
		List<Double> values2 = new ArrayList<Double>();
		List<Double> values3 = new ArrayList<Double>();
		List<Double> valuestemp = new ArrayList<Double>();
		File file = new File("Workbook1.xls");
		
		for(int colnum = 0; colnum < 6; colnum ++){
			try {
				values = readexcel.readread(file, colnum);
			} catch (BiffException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}
			
			for (int j = 0; i < 3; i++){
				if ( j == 0){
					for (int i = 0; i < values.size()/3; i++){
						values1.add(values.get(i));
					}
					for (int i = 0; i < values1.size(); i++){
						valuestemp.add(values1.get(i));
					}
				}
				else if (j == 1){
					valuestemp.clear();
					for (int i = values.size()/3; i < 2*values.size()/3; i++){
						values2.add(values.get(i));
					}
					for (int i = 0; i < values2.size(); i++){
						valuestemp.add(values2.get(i));
					}
				}
				else if (j == 2){
					valuestemp.clear();
					for (int i = 2*values.size()/3; i < 3*values.size()/3; i++){
						values2.add(values.get(i));
					}
					for (int i = 0; i < values2.size(); i++){
						valuestemp.add(values2.get(i));
					}
				}
				
				
				PeakDetect detector = new PeakDetect();
				//Map<Integer, Double> result = detector.peak_detection(values);
				Map<Integer, Double> result = detector.peak_detection(valuestemp);
				System.out.print(colnum+1 + " (th) signal : ");
				
				for (Entry<Integer, Double> entry : result.entrySet()) {
					System.out.print("(" + entry.getKey() + "," + entry.getValue() + ") ");
				}
				System.out.println();
			}
				
			/*
			HRVcompute hrv = new HRVcompute(result);
			Wavelet wave = new Wavelet();
			
			
			System.out.println("Temporal location is " + hrv.RRloc());
			System.out.println("RR interval "+  hrv.RRinterval());
			System.out.println("RR interval means are " +  hrv.RRmean());
			System.out.println("RR interval stds are " +  hrv.RRstd());
			System.out.println("RR interval RMS are " + hrv.RR_RMS());
			*/
		}
		/*
		System.out.println();
		List <Double> b = Arrays.asList(1.0,2.0,3.0,4.0,5.0);
		List <Double> a = Arrays.asList(1.0,2.0,3.0);
		List <Double> x = Arrays.asList(1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0);
		
		Wavelet wave = new Wavelet();
		FFT fft = new FFT(x.size());
		List<Double> window = fft.getWindow();
		List<Double> re = new ArrayList<Double>();
		List<Double> im = new ArrayList<Double>();
		*/
		
		// System.out.println(wave.Filter(b, a, x));
		// System.out.println(wave.MirrorFilt(bb));
		// System.out.println(wave.lshift(test1));
		// System.out.println(wave.iconv(test2,test3));
		// System.out.println(wave.aconv(test2,test3));
		// System.out.println(wave.DownDyadHi(test3,test2));
		// System.out.println(wave.DownDyadLo(test3,test2));
		// System.out.println(wave.Dyad(5));
		// System.out.println( (int) (Math.log(8192)/Math.log(2))  );
		// System.out.println( wave.FWT_PO(x, 2, a) );
		// System.out.println( wave.rshift(b) );
		// System.out.println( wave.UpSampleN(a) );
		// System.out.println( wave.IWT_PO(x,2,a) );
	}
}
