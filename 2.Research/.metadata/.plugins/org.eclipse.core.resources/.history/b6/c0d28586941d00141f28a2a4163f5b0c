package DrM_Peak;

import java.util.ArrayList;
import java.util.List;

public class FFT {
	int n, m;
	List<Double>cos = new ArrayList<Double>();
	List<Double>sin = new ArrayList<Double>();
	List<Double>window = new ArrayList<Double>();

	public FFT(int n){
		// n must be power of 2 
		this.n = n;
		this.m = (int)(Math.log(n) / Math.log(2));

		if(n != (1<<m)){
			throw new RuntimeException("FFT length must be power of 2");
		}

		for (int i = 0; i < n/2 ; i++){
			cos.add(Math.cos(-2*Math.PI*i/n)); 
			sin.add(Math.sin(-2*Math.PI*i/n)); 
		}
		makeWindow();
	}

	protected void makeWindow(){
		double temp;
		for(int i = 0; i < window.size(); i++){
			temp = 0.42 - 0.5 * Math.cos(2*Math.PI*i/(n-1)) + 0.08 * Math.cos(4*Math.PI*i/(n-1));
			window.add(temp);
		}
	}
	public List<Double>getWindow(){
		return window;
	}
	
	public void fft(List<Double>x, List<Double>y){
		int i,j,k,n1,n2,a;
		double c,s,e,t1,t2;
		// Bit-reverse
		j = 0;
		n2 = n/2;
		
		for (i=1; i < n - 1; i++) {
		n1 = n2;
		while ( j >= n1 ) {
			j = j - n1;
			n1 = n1/2;
		}
		j = j + n1;
		
		if (i < j) {
			t1 = x.get(i);
			x.set(i,x.get(j));
			x.set(j,t1);
			t1 = y.get(i);
			y.set(i,y.get(j));
			y.set(j,t1);
			}
		}
		// FFT
		n1 = 0;
		n2 = 1;
		for (i=0; i < m; i++) {
			n1 = n2;
			n2 = n2 + n2;
			a = 0;
			
			for (j=0; j < n1; j++) {
				c = cos.get(a);
				s = sin.get(a);
				a +=  1 << (m-i-1);
				
				for (k=j; k < n; k=k+n2) {
					t1 = c*x.get(k+n1) - s*y.get(k+n1);
					t2 = s*x[k+n1] + c*y[k+n1];
					
				}
				
			}
		}
	}
	
	
}

